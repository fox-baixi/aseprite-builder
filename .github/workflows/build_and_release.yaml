name: Build and release Aseprite

on:
  push:
    branches:
      - main
    paths:
      - 'BuildLog.md'
  workflow_dispatch: # 允许手动触发
  schedule:
    # 每周日 UTC 时间 00:00 运行
    # 你可以根据需要调整 cron 表达式。
    # 例如：'0 0 * * 1' 是每周一 00:00 UTC
    - cron: '0 0 * * 0'

env:
  BUILD_TYPE: Release

jobs:
  fetch-aseprite-info:
    name: Fetch deps info and check version
    runs-on: ubuntu-latest
    outputs:
      download-link: ${{ steps.aseprite-link.outputs.download-link }}
      release-tag: ${{ steps.aseprite-link.outputs.release-tag }}
      should-proceed: ${{ steps.compare-versions.outputs.should-proceed }} # 新增输出，指示是否继续
    steps:
      - name: Fetch Aseprite release link (Upstream)
        id: aseprite-link
        uses: a1393323447/fetch-release@main # 这个自定义 Action 用于获取上游 Aseprite 的最新版本信息
        with:
            group: aseprite
            repo: aseprite
            match: Aseprite-.*?-Source.zip

      - name: Get latest local release tag
        id: get-local-tag
        uses: actions/github-script@v7 # 使用 v7 版本，支持 Node.js 20
        with:
          script: |
            try {
              // 获取当前仓库的最新 Release
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 1 // 只获取最新的一个
              });
              if (releases.length > 0) {
                core.setOutput('local-tag', releases[0].tag_name);
                console.log(`Latest local release tag: ${releases[0].tag_name}`);
              } else {
                core.setOutput('local-tag', ''); // 如果没有 Release，则设置为空
                console.log('No local releases found.');
              }
            } catch (error) {
              console.error('Failed to fetch local releases:', error);
              core.setOutput('local-tag', ''); // 错误处理
            }

      - name: Compare versions
        id: compare-versions
        run: |
          UPSTREAM_TAG="${{ steps.aseprite-link.outputs.release-tag }}"
          LOCAL_TAG="${{ steps.get-local-tag.outputs.local-tag }}"

          echo "Upstream Aseprite Tag: $UPSTREAM_TAG"
          echo "Local Repository Latest Release Tag: $LOCAL_TAG"

          if [ -z "$UPSTREAM_TAG" ]; then
            echo "Error: Could not fetch upstream Aseprite tag. Aborting."
            echo "should-proceed=false" >> "$GITHUB_OUTPUT"
            exit 1 # 标记此步骤失败，后续作业将不会运行
          fi

          if [ "$UPSTREAM_TAG" == "$LOCAL_TAG" ]; then
            echo "Upstream version is the same as local version. No new build needed."
            echo "should-proceed=false" >> "$GITHUB_OUTPUT"
          else
            echo "Upstream version is different from local version. Proceeding with build."
            echo "should-proceed=true" >> "$GITHUB_OUTPUT"
          fi

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: fetch-aseprite-info # 依赖于上一个作业
    permissions:
      contents: write
    outputs:
      download-link: ${{ needs.fetch-aseprite-info.outputs.download-link }}
      release-tag: ${{ needs.fetch-aseprite-info.outputs.release-tag }}
    # 只有当 fetch-aseprite-info 作业的 should-proceed 输出为 'true' 时才运行此作业
    if: needs.fetch-aseprite-info.outputs.should-proceed == 'true'
    steps:
      - uses: actions/checkout@v4 # 建议更新到 v4
      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.fetch-aseprite-info.outputs.release-tag }}
          body: Aseprite-${{ needs.fetch-aseprite-info.outputs.release-tag }}
          skipIfReleaseExists: true # 如果 Release 已经存在，则跳过创建，但作业仍会成功
          token: ${{ secrets.GITHUB_TOKEN }}

  build-aseprite:
    name: Build Aseprite
    needs: create-release # 依赖于 create-release 作业
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
          os: [ windows-latest, ubuntu-latest, macOS-latest ]
        fail-fast: false
    # 只有当 fetch-aseprite-info 作业的 should-proceed 输出为 'true' 时才运行此作业
    # 即使 create-release 作业因为 skipIfReleaseExists: true 而没有创建新的 Release，
    # 如果 should-proceed 为 true，也应该尝试构建并上传资产到现有 Release。
    if: needs.fetch-aseprite-info.outputs.should-proceed == 'true'
    steps:
      - name: Install Dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
            libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
      - uses: actions/checkout@v4
      - name: Install Aseprite
        shell: bash
        run: |
          git clone --recurse-submodules -j8 https://github.com/aseprite/aseprite --branch ${{ needs.create-release.outputs.release-tag }}
      - name: Install Skia
        working-directory: aseprite
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]] ; then
            choco install wget -y --no-progress
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip
            unzip Skia-Windows-Release-x64.zip -d skia
          elif [[ "${{ runner.os }}" == "macOS" ]] ; then
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-macOS-Release-arm64.zip
            unzip Skia-macOS-Release-arm64.zip -d skia
          else
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Linux-Release-x64.zip
            unzip Skia-Linux-Release-x64.zip -d skia
          fi
      - uses: aseprite/get-ninja@main
      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
      - name: Generating Makefiles
        shell: bash
        working-directory: aseprite
        run: |
          export enable_ccache=off
          export laf_backend=skia
          export enable_scripting=on

          if [[ "${{ runner.os }}" == "macOS" ]] ; then
            export skia_arch=arm64
          else
            export skia_arch=x64
          fi

          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
            -DENABLE_TESTS=OFF \
            -DENABLE_SCRIPTING=$enable_scripting \
            -DENABLE_CCACHE=$enable_ccache \
            -DLAF_BACKEND=$laf_backend \
            -DSKIA_DIR=$(realpath skia) \
            -DOPENSSL_USE_STATIC_LIBS=ON \
            -DSKIA_LIBRARY_DIR=$(realpath skia/out/Release-$skia_arch)
      - name: Compiling
        shell: bash
        working-directory: aseprite
        run: |
          cd build && ninja
      - name: Clean Up Build folder
        working-directory: aseprite/build/bin
        shell: bash
        run: find . -mindepth 1 ! \( -name 'aseprite' -o -name 'aseprite.exe' -o -name 'data' -prune \) -exec rm -rf {} +
      - name: Make portable zip
        working-directory: aseprite/build/bin
        run: echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini
      - name: Create release
        working-directory: aseprite/build/bin
        run: 7z -tzip a Aseprite-${{ needs.create-release.outputs.release-tag }}-${{ runner.os }}.zip *
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: aseprite/build/bin/Aseprite-${{ needs.create-release.outputs.release-tag }}-${{ runner.os }}.zip
          asset_name: Aseprite-${{ needs.create-release.outputs.release-tag }}-${{ runner.os }}.zip
          tag: ${{ needs.create-release.outputs.release-tag }}
